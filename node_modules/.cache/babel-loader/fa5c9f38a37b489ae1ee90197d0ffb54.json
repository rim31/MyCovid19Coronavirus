{"ast":null,"code":"var _jsxFileName = \"/Users/rims/Documents/Projects/covid19/src/components/Charts/LinearChart.tsx\";\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2'; // CHART Covid19 - 2months daily updated - using Bar from react-chartjs-2\n\nexport default function LinearChart(props) {\n  const ref = React.useRef(null); // reference to get the width size\n\n  const isWindowClient = typeof window === \"object\"; // to get window size\n\n  const [windowSize, setWindowSize] = React.useState(window.innerWidth); // here under 500px, display turn logo);\n\n  React.useEffect(() => {\n    //a handler which will be called on change of the screen resize\n    function setSize() {\n      setWindowSize(window.innerWidth);\n    }\n\n    if (isWindowClient) {\n      //register the window resize listener\n      window.addEventListener(\"resize\", setSize); //unregister the listener on destroy of the hook\n\n      return () => window.removeEventListener(\"resize\", setSize);\n    }\n  }, [isWindowClient, setWindowSize]);\n  React.useEffect(() => {\n    // get the size of windows for responsive display on loading page\n    setWindowSize(ref.current ? ref.current.offsetWidth : 0); // eslint-disable-next-line\n  }, []); // configuration of the options of the graph(color, label etc...)\n\n  const data = {\n    labels: props.labels,\n    datasets: [{\n      // title of the graph\n      label: `COVID-19 confirmed cases - last 2 months`,\n      // data came from the Store component, it represent the daily update Covid19 situation graph\n      data: props.data,\n      // color of the bar\n      backgroundColor: \"lightgreen\",\n      // other colors\n      color: \"rgba(009,009,250,0.75)\",\n      hoverBackgroundColor: \"rgb(255,255,153,1)\"\n    }]\n  }; // options to change the infos of the graph\n\n  const options = {\n    legend: {\n      display: true,\n      fontColor: 'white'\n    },\n    title: {\n      display: true,\n      text: `Finland - Covid19 - last 2 months`,\n      fontColor: 'white'\n    },\n    scales: {\n      // option for axis Y - already responsive but can't fit under 500px. Solution => have to turn the phone\n      // NOTE !!! if you test on a normal browser, refreshe the page when you rotate the phone screen ;-)\n      yAxes: [{\n        ticks: {\n          fontColor: \"white\",\n          fontSize: 9,\n          color: \"rgba(2, 2, 2, 0.1)\",\n          // display axe only if width < 500px\n          display: windowSize < 500 ? false : true\n        },\n        scaleLabel: {\n          // display axe only if width >= 500px\n          display: windowSize >= 500 ? false : true,\n          color: \"rgba(2, 2, 2, 0.1)\",\n          fontColor: \"white\",\n          labelString: windowSize >= 500 ? '' : 'Rotate ⤵️'\n        }\n      }],\n      // option for axis x\n      xAxes: [{\n        ticks: {\n          fontColor: \"white\",\n          fontSize: 14\n        }\n      }],\n      responsive: true\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: \"#555555\"\n    },\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, \" \", windowSize < 500 && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/turku/images/Use_Landscape_Mode.jpg\",\n    height: \"40\",\n    alt: \"use Landscape Mode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 82\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 169\n    }\n  }, \" Turn you device \")), /*#__PURE__*/React.createElement(Bar, {\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/rims/Documents/Projects/covid19/src/components/Charts/LinearChart.tsx"],"names":["React","Bar","LinearChart","props","ref","useRef","isWindowClient","window","windowSize","setWindowSize","useState","innerWidth","useEffect","setSize","addEventListener","removeEventListener","current","offsetWidth","data","labels","datasets","label","backgroundColor","color","hoverBackgroundColor","options","legend","display","fontColor","title","text","scales","yAxes","ticks","fontSize","scaleLabel","labelString","xAxes","responsive","textAlign"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB,C,CAEA;;AACA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAAiC;AAC9C,QAAMC,GAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa,IAAb,CAAjB,CAD8C,CACT;;AACrC,QAAMC,cAAc,GAAG,OAAOC,MAAP,KAAkB,QAAzC,CAF8C,CAEK;;AAEnD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,KAAK,CAACU,QAAN,CAAeH,MAAM,CAACI,UAAtB,CAApC,CAJ8C,CAIwB;;AAEtEX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB;AACA,aAASC,OAAT,GAAmB;AACjBJ,MAAAA,aAAa,CAACF,MAAM,CAACI,UAAR,CAAb;AACD;;AACD,QAAIL,cAAJ,EAAoB;AAClB;AACAC,MAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCD,OAAlC,EAFkB,CAGlB;;AACA,aAAO,MAAMN,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCF,OAArC,CAAb;AACD;AACF,GAXD,EAWG,CAACP,cAAD,EAAiBG,aAAjB,CAXH;AAaAT,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB;AACAH,IAAAA,aAAa,CAACL,GAAG,CAACY,OAAJ,GAAcZ,GAAG,CAACY,OAAJ,CAAYC,WAA1B,GAAwC,CAAzC,CAAb,CAFoB,CAGpB;AACD,GAJD,EAIG,EAJH,EAnB8C,CAyB9C;;AACA,QAAMC,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAEhB,KAAK,CAACgB,MADH;AAEXC,IAAAA,QAAQ,EAAE,CACR;AACE;AACAC,MAAAA,KAAK,EAAG,0CAFV;AAGE;AACAH,MAAAA,IAAI,EAAEf,KAAK,CAACe,IAJd;AAKE;AACAI,MAAAA,eAAe,EAAE,YANnB;AAOE;AACAC,MAAAA,KAAK,EAAE,wBART;AASEC,MAAAA,oBAAoB,EAAE;AATxB,KADQ;AAFC,GAAb,CA1B8C,CA0C9C;;AACA,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,SAAS,EAAE;AAFL,KADM;AAKdC,IAAAA,KAAK,EAAE;AACLF,MAAAA,OAAO,EAAE,IADJ;AAELG,MAAAA,IAAI,EAAG,mCAFF;AAGLF,MAAAA,SAAS,EAAE;AAHN,KALO;AAUdG,IAAAA,MAAM,EAAE;AACN;AACA;AACAC,MAAAA,KAAK,EAAE,CAAC;AACNC,QAAAA,KAAK,EAAE;AACLL,UAAAA,SAAS,EAAE,OADN;AAELM,UAAAA,QAAQ,EAAE,CAFL;AAGLX,UAAAA,KAAK,EAAE,oBAHF;AAIL;AACAI,UAAAA,OAAO,EAAEnB,UAAU,GAAG,GAAb,GAAmB,KAAnB,GAA2B;AAL/B,SADD;AAQN2B,QAAAA,UAAU,EAAE;AACV;AACAR,UAAAA,OAAO,EAAEnB,UAAU,IAAI,GAAd,GAAoB,KAApB,GAA4B,IAF3B;AAGVe,UAAAA,KAAK,EAAE,oBAHG;AAIVK,UAAAA,SAAS,EAAE,OAJD;AAKVQ,UAAAA,WAAW,EAAE5B,UAAU,IAAI,GAAd,GAAoB,EAApB,GAAyB;AAL5B;AARN,OAAD,CAHD;AAmBN;AACA6B,MAAAA,KAAK,EAAE,CAAC;AACNJ,QAAAA,KAAK,EAAE;AACLL,UAAAA,SAAS,EAAE,OADN;AAELM,UAAAA,QAAQ,EAAE;AAFL;AADD,OAAD,CApBD;AA0BNI,MAAAA,UAAU,EAAE;AA1BN;AAVM,GAAhB;AAuCA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEhB,MAAAA,eAAe,EAAE;AAAnB,KAAZ;AAA4C,IAAA,GAAG,EAAElB,GAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAGGI,UAAU,GAAG,GAAb,iBAAqB;AAAK,IAAA,KAAK,EAAE;AAAE+B,MAAAA,SAAS,EAAE,QAAb;AAAuBhB,MAAAA,KAAK,EAAE;AAA9B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAqD;AAAK,IAAA,GAAG,EAAC,sCAAT;AAAgD,IAAA,MAAM,EAAC,IAAvD;AAA4D,IAAA,GAAG,EAAC,oBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArD,eAA4I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA5I,CAHxB,eAKE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAEL,IAAX;AAAiB,IAAA,OAAO,EAAEO,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD","sourcesContent":["import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\n// CHART Covid19 - 2months daily updated - using Bar from react-chartjs-2\nexport default function LinearChart(props: any) {\n  const ref: any = React.useRef(null); // reference to get the width size\n  const isWindowClient = typeof window === \"object\"; // to get window size\n\n  const [windowSize, setWindowSize] = React.useState(window.innerWidth) // here under 500px, display turn logo);\n\n  React.useEffect(() => {\n    //a handler which will be called on change of the screen resize\n    function setSize() {\n      setWindowSize(window.innerWidth);\n    }\n    if (isWindowClient) {\n      //register the window resize listener\n      window.addEventListener(\"resize\", setSize);\n      //unregister the listener on destroy of the hook\n      return () => window.removeEventListener(\"resize\", setSize);\n    }\n  }, [isWindowClient, setWindowSize]);\n\n  React.useEffect(() => {\n    // get the size of windows for responsive display on loading page\n    setWindowSize(ref.current ? ref.current.offsetWidth : 0);\n    // eslint-disable-next-line\n  }, []);\n\n  // configuration of the options of the graph(color, label etc...)\n  const data = {\n    labels: props.labels,\n    datasets: [\n      {\n        // title of the graph\n        label: `COVID-19 confirmed cases - last 2 months`,\n        // data came from the Store component, it represent the daily update Covid19 situation graph\n        data: props.data,\n        // color of the bar\n        backgroundColor: \"lightgreen\",\n        // other colors\n        color: \"rgba(009,009,250,0.75)\",\n        hoverBackgroundColor: \"rgb(255,255,153,1)\",\n      }\n    ]\n  }\n  // options to change the infos of the graph\n  const options = {\n    legend: {\n      display: true,\n      fontColor: 'white'\n    },\n    title: {\n      display: true,\n      text: `Finland - Covid19 - last 2 months`,\n      fontColor: 'white',\n    },\n    scales: {\n      // option for axis Y - already responsive but can't fit under 500px. Solution => have to turn the phone\n      // NOTE !!! if you test on a normal browser, refreshe the page when you rotate the phone screen ;-)\n      yAxes: [{\n        ticks: {\n          fontColor: \"white\",\n          fontSize: 9,\n          color: \"rgba(2, 2, 2, 0.1)\",\n          // display axe only if width < 500px\n          display: windowSize < 500 ? false : true,\n        },\n        scaleLabel: {\n          // display axe only if width >= 500px\n          display: windowSize >= 500 ? false : true,\n          color: \"rgba(2, 2, 2, 0.1)\",\n          fontColor: \"white\",\n          labelString: windowSize >= 500 ? '' : 'Rotate ⤵️'\n        }\n      }],\n      // option for axis x\n      xAxes: [{\n        ticks: {\n          fontColor: \"white\",\n          fontSize: 14,\n        }\n      }],\n      responsive: true,\n    }\n  }\n  return (\n    <div style={{ backgroundColor: \"#555555\" }} ref={ref}> {/* ref for the widht size*/}\n\n      {/* display a logo to rotate phone when the screen is to small */}\n      {windowSize < 500 && (<div style={{ textAlign: \"center\", color: \"white\" }}><img src=\"/turku/images/Use_Landscape_Mode.jpg\" height=\"40\" alt=\"use Landscape Mode\" /><span> Turn you device </span></div>)}\n      {/* component Graph bar from the library*/}\n      <Bar data={data} options={options} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}