{"ast":null,"code":"var _jsxFileName = \"/Users/rims/Documents/Projects/covid19/src/components/Pages/HomeComponent.tsx\";\nimport React, { useState } from 'react';\nimport BarChart from '../Charts/BarChart';\nimport LinearChart from '../Charts/LinearChart';\nimport moment from 'moment';\nimport { StoreContainer } from '../Store';\nimport Dashboard from '../Charts/Dashboard';\nimport Flag from '../modules/Flag';\nimport SelectCase from '../Charts/SelectCase';\nimport SelectPeriod from '../Charts/SelectPeriod';\nimport SortCountries from '../modules/SortCountries';\nimport TableCasesData from '../modules/TableCasesData'; // import ListCountries from '../modules/ListCountries';\n// import { useParams, useHistory } from 'react-router-dom';\n\nimport _ from 'lodash';\nimport '../../App.css'; // position: \"-webkit-sticky\", top: \"4.5rem\"\n\nexport default function HomeComponent() {\n  const [data, setData] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [countries, setCountries] = useState([]);\n  const [dates, setDates] = React.useState(`${moment().subtract(1, 'months').format()}`);\n  const [cases, setCases] = React.useState(\"confirmed\");\n  const [X, setX] = useState([]);\n  const [Y, setY] = useState([]);\n  let countrySelect = {\n    code: \"fr\",\n    name: 'france'\n  };\n  const unstated = StoreContainer.useContainer();\n\n  function setGraph(data) {\n    setDate(\"World \" + moment(data.Date).format('YYYY/MM/DD')); // set date for graph Label Title\n\n    const infos = unstated.globalDataGraph(data.Global); // cleaning data =  returning a double table \n\n    setX(infos === null || infos === void 0 ? void 0 : infos.resultDates);\n    setY(infos === null || infos === void 0 ? void 0 : infos.resultCases);\n  }\n  /**\n   * function getCovidData to get all covid world info(infected, cured, deaths)\n   * @returns res : array of results of all infected\n   */\n\n\n  function getCovidData() {\n    try {\n      fetch(`https://api.covid19api.com/summary`, {\n        method: \"GET\"\n      }).then(response => response.json()).then(res => {\n        // setData(res);\n        setGraph(res);\n        return res;\n      }).catch(err => alert(err));\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n  }\n\n  ;\n  /**\n   * function getAll : to get the total of all data in the store\n   */\n\n  async function getAll() {\n    await unstated.getTotal();\n  }\n  /**\n   * function to set Country and contry code to the store\n   * @param event \n   */\n\n\n  function handleClick(event) {\n    unstated.setCountry(event.currentTarget.dataset.name.toLowerCase());\n    unstated.setCode(event.currentTarget.dataset.code.toLowerCase());\n  }\n  /**\n   * allow to modify data choosen on click, (when you change the country)\n   */\n\n\n  React.useEffect(() => {\n    setCountries(unstated.country_list);\n\n    if (unstated.code) {\n      unstated.getCovidCountry(unstated.code, cases, dates);\n    } else if (countries.filter(countries => countries.name.toLowerCase().includes(unstated.country)).length === 1) {\n      // eslint-disable-next-line\n      countrySelect = countries.filter(countries => countries.name.toLowerCase().includes(unstated.country))[0];\n      unstated.setCode(countrySelect.code.toLowerCase());\n      unstated.getCovidCountry(countrySelect.code.toLowerCase(), \"confirmed\", `${moment().subtract(1, 'months').format()}`);\n    } else {\n      unstated.getCovidCountry(\"\", \"\", `${moment().subtract(30, 'days').format()}`);\n    } // eslint-disable-next-line\n\n  }, [unstated.country, cases, dates]);\n  React.useEffect(() => {\n    setData(getCovidData());\n    getAll(); // eslint-disable-next-line\n  }, []);\n  React.useEffect(() => {\n    if (!_.isEmpty(unstated.total)) {\n      let tmp = unstated.total;\n      if (!_.isEmpty(tmp.Countries)) setData(tmp.Countries.sort(SortCountries('TotalConfirmed', 'desc')));\n    } // eslint-disable-next-line\n\n  }, [unstated.total]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"aside\", {\n    className: \"sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    style: {\n      position: \"sticky\",\n      top: \"0rem\",\n      zIndex: 100,\n      backgroundColor: '#333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control has-icons-left\",\n    style: {\n      position: 'sticky'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectCase, {\n    setCases: setCases,\n    className: \"is-fullwidth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(SelectPeriod, {\n    setDates: setDates,\n    className: \"is-fullwidth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, \"Countries \"), !_.isEmpty(unstated.code) && !_.isEmpty(unstated.country) ? /*#__PURE__*/React.createElement(TableCasesData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }) : \"\", data ? data.filter(countries => countries.Country.toLowerCase().includes(unstated.country)).map((item, i) => /*#__PURE__*/React.createElement(\"span\", {\n    \"data-name\": item.Country,\n    \"data-code\": item.CountryCode,\n    className: \"button is-secondary\",\n    key: i,\n    onClick: handleClick,\n    style: {\n      margin: \"1px\",\n      display: 'flex',\n      justifyContent: \"space-between\",\n      backgroundColor: \"#333\",\n      color: \"whitesmoke\",\n      fontSize: \"0.8em\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 136\n    }\n  }, item.Country, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, item.TotalConfirmed, Flag(item.CountryCode)))) : \"\"), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Dashboard, {\n    data: unstated.total ? unstated.total : data ? data : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sticky-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"nav flex-column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, unstated.code ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(LinearChart, {\n    dataCountry: unstated.data,\n    labelsCountry: unstated.labels,\n    country: `${unstated.code.toUpperCase()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null), data ? /*#__PURE__*/React.createElement(BarChart, {\n    dataCountry: Y,\n    labelsCountry: X,\n    country: date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null)))));\n}","map":{"version":3,"sources":["/Users/rims/Documents/Projects/covid19/src/components/Pages/HomeComponent.tsx"],"names":["React","useState","BarChart","LinearChart","moment","StoreContainer","Dashboard","Flag","SelectCase","SelectPeriod","SortCountries","TableCasesData","_","HomeComponent","data","setData","date","setDate","countries","setCountries","dates","setDates","subtract","format","cases","setCases","X","setX","Y","setY","countrySelect","code","name","unstated","useContainer","setGraph","Date","infos","globalDataGraph","Global","resultDates","resultCases","getCovidData","fetch","method","then","response","json","res","catch","err","alert","console","log","getAll","getTotal","handleClick","event","setCountry","currentTarget","dataset","toLowerCase","setCode","useEffect","country_list","getCovidCountry","filter","includes","country","length","isEmpty","total","tmp","Countries","sort","position","top","zIndex","backgroundColor","display","flexDirection","Country","map","item","i","CountryCode","margin","justifyContent","color","fontSize","TotalConfirmed","labels","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport BarChart from '../Charts/BarChart';\nimport LinearChart from '../Charts/LinearChart';\nimport moment from 'moment';\nimport { StoreContainer } from '../Store';\nimport Dashboard from '../Charts/Dashboard';\nimport Flag from '../modules/Flag';\nimport SelectCase from '../Charts/SelectCase';\nimport SelectPeriod from '../Charts/SelectPeriod';\nimport SortCountries from '../modules/SortCountries';\nimport TableCasesData from '../modules/TableCasesData';\n// import ListCountries from '../modules/ListCountries';\n// import { useParams, useHistory } from 'react-router-dom';\n\nimport _ from 'lodash';\nimport '../../App.css'\n\n\n// position: \"-webkit-sticky\", top: \"4.5rem\"\n\n\ninterface ICountry {\n  code: string,\n  name: string\n}\n\nexport default function HomeComponent() {\n  const [data, setData] = useState<any>(\"\");\n  const [date, setDate] = useState<any>(\"\");\n  const [countries, setCountries] = useState<any>([]);\n  const [dates, setDates] = React.useState<string>(`${moment().subtract(1, 'months').format()}`)\n  const [cases, setCases] = React.useState<string>(\"confirmed\")\n  const [X, setX] = useState<any>([]);\n  const [Y, setY] = useState<any>([]);\n  let countrySelect: ICountry = { code: \"fr\", name: 'france' };\n  const unstated = StoreContainer.useContainer();\n\n  function setGraph(data: any) {\n    setDate(\"World \" + moment(data.Date).format('YYYY/MM/DD'));// set date for graph Label Title\n    const infos = unstated.globalDataGraph(data.Global);// cleaning data =  returning a double table \n    setX(infos?.resultDates)\n    setY(infos?.resultCases)\n  }\n\n  /**\n   * function getCovidData to get all covid world info(infected, cured, deaths)\n   * @returns res : array of results of all infected\n   */\n  function getCovidData() {\n    try {\n      fetch(`https://api.covid19api.com/summary`, {\n        method: \"GET\",\n      }).then((response: any) => response.json()).then((res) => {\n        // setData(res);\n        setGraph(res)\n        return (res)\n      }).catch(err => alert(err));\n    } catch (err) {\n      console.log(err)\n      return;\n    }\n  };\n\n  /**\n   * function getAll : to get the total of all data in the store\n   */\n  async function getAll() {\n    await unstated.getTotal();\n  }\n\n/**\n * function to set Country and contry code to the store\n * @param event \n */\n  function handleClick(event: any) {\n    unstated.setCountry(event.currentTarget.dataset.name.toLowerCase());\n    unstated.setCode(event.currentTarget.dataset.code.toLowerCase());\n  }\n\n  /**\n   * allow to modify data choosen on click, (when you change the country)\n   */\n  React.useEffect(() => {\n    setCountries(unstated.country_list);\n    if (unstated.code) {\n      unstated.getCovidCountry(unstated.code, cases, dates);\n    } else if (countries.filter((countries: any) => countries.name.toLowerCase().includes(unstated.country)).length === 1) {\n      // eslint-disable-next-line\n      countrySelect = countries.filter((countries: any) => countries.name.toLowerCase().includes(unstated.country))[0];\n      unstated.setCode(countrySelect.code.toLowerCase());\n      unstated.getCovidCountry(countrySelect.code.toLowerCase(), \"confirmed\", `${moment().subtract(1, 'months').format()}`);\n    } else {\n      unstated.getCovidCountry(\"\", \"\", `${moment().subtract(30, 'days').format()}`);\n    }\n    // eslint-disable-next-line\n  }, [unstated.country, cases, dates])\n\n  React.useEffect(() => {\n    setData(getCovidData());\n    getAll();\n    // eslint-disable-next-line\n  }, [])\n  React.useEffect(() => {\n    if (!_.isEmpty(unstated.total)) {\n      let tmp: any = unstated.total;\n      if (!_.isEmpty(tmp.Countries))\n        setData(tmp.Countries.sort(SortCountries('TotalConfirmed', 'desc')));\n    }\n    // eslint-disable-next-line\n  }, [unstated.total])\n\n  return (\n    <>\n\n      <header>\n      </header>\n      <aside className=\"sidebar\">\n        <div className=\"field\" style={{ position: \"sticky\", top: \"0rem\", zIndex: 100, backgroundColor: '#333' }}>\n          <div className=\"control has-icons-left\" style={{ position: 'sticky' }} >\n            <span style={{ display: 'flex', flexDirection: 'column' }}>\n\n              {/* API has changed */}\n              {/* <input type=\"text\" className=\"input  is-fullwidth mt-1\" value={unstated.country} onChange={e => unstated.setCountry((e.target.value).toLowerCase())} placeholder='Search a country' />\n              {unstated.country ? <span className=\"icon is-small is-left\" onClick={() => { unstated.setCountry(\"\"); unstated.setCode(\"\"); }}>\n                <i className=\"delete\"></i>\n              </span> : <></>} */}\n              <SelectCase setCases={setCases} className=\"is-fullwidth\" />\n              <SelectPeriod setDates={setDates} className=\"is-fullwidth\" />\n            </span>\n          </div>\n        </div>\n\n        <h3 className=\"mt-1\">Countries </h3>\n        {!_.isEmpty(unstated.code) && !_.isEmpty(unstated.country) ?\n          <TableCasesData />\n          : \"\"}\n\n        {data ? data.filter((countries: any) => countries.Country.toLowerCase().includes(unstated.country)).map((item: any, i: any) => <span data-name={item.Country} data-code={item.CountryCode}\n          className=\"button is-secondary\" key={i} onClick={handleClick}\n          style={{\n            margin: \"1px\", display: 'flex', justifyContent: \"space-between\",\n            backgroundColor: \"#333\", color: \"whitesmoke\", fontSize: \"0.8em\",\n          }} >\n          {item.Country}\n          <span>{item.TotalConfirmed}{Flag(item.CountryCode)}</span>\n        </span>) : \"\"}\n      </aside>\n\n      <section className=\"main\">\n        <Dashboard data={unstated.total ? unstated.total : (data ? data : {})} />\n        <div className=\"sticky-top\">\n          <div className=\"nav flex-column\">\n            {unstated.code ?\n              <span>\n                <LinearChart dataCountry={unstated.data} labelsCountry={unstated.labels} country={`${unstated.code.toUpperCase()}`} />\n              </span>\n              : <></>}\n            {data ?\n              <BarChart dataCountry={Y} labelsCountry={X} country={date} />\n              : <></>}\n          </div>\n        </div>\n      </section>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}