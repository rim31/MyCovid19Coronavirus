{"ast":null,"code":"var _jsxFileName = \"/Users/rims/Documents/Projects/covid19/src/components/Map/MapChart.tsx\";\nimport React from \"react\";\nimport { StoreContainer } from '../Store';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { ComposableMap, Geographies, Geography, Marker, ZoomableGroup } from \"react-simple-maps\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = props => {\n  const unstated = StoreContainer.useContainer();\n  const [data, setData] = React.useState(unstated.total);\n  const [maxMarkers, setMaxMarkers] = React.useState(700000);\n  const myMarkers = [];\n\n  function mapDataCountries(data) {\n    if (data.Countries) {\n      data.Countries.map(item => myMarkers.push({\n        name: item.Country,\n        markerOffset: 0,\n        lon: 0,\n        lat: 0\n      }));\n    } // console.log(myMarkers)\n\n\n    return myMarkers;\n  }\n\n  React.useEffect(() => {\n    setData(unstated.getCovidMapMarkers());\n    if (data) mapDataCountries(data); // eslint-disable-next-line\n  }, [data, unstated.code]);\n  React.useEffect(() => {\n    console.log(unstated.markers);\n    if (unstated.markers !== undefined) setMaxMarkers(unstated.markers[9] ? unstated.markers[9].TotalConfirmed : 700000); // eslint-disable-next-line\n  }, [unstated.markers]);\n  return /*#__PURE__*/React.createElement(ComposableMap, {\n    projectionConfig: {\n      rotate: [-10, 0, 0],\n      scale: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    zoom: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => /*#__PURE__*/React.createElement(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    fill: \"#DDD\",\n    stroke: \"#FFF\",\n    onMouseEnter: () => {\n      let {\n        NAME,\n        POP_EST,\n        ISO_A2\n      } = geo.properties;\n\n      let country = _.find(unstated.markers, {\n        CountryCode: ISO_A2\n      });\n\n      if (country) {\n        props.setTooltipContent({\n          Country: NAME,\n          Population: POP_EST,\n          NewConfirmed: country.NewConfirmed,\n          TotalConfirmed: country.TotalConfirmed,\n          NewDeaths: country.NewDeaths,\n          TotalDeaths: country.TotalDeaths,\n          NewRecovered: country.NewRecovered,\n          TotalRecovered: country.TotalRecovered,\n          data: country\n        });\n      } else {\n        props.setTooltipContent({\n          Country: NAME\n        });\n      }\n    },\n    onMouseLeave: () => {\n      props.setTooltipContent(\"\");\n    },\n    onClick: () => {\n      let {\n        NAME,\n        ISO_A2\n      } = geo.properties;\n      unstated.setCode(ISO_A2.toUpperCase());\n      unstated.setCountry(NAME.toUpperCase());\n    },\n    style: {\n      default: {\n        fill: \"#D6D6DA\",\n        outline: \"none\"\n      },\n      hover: {\n        fill: \"#F53\",\n        outline: \"none\"\n      },\n      pressed: {\n        fill: \"#E42\",\n        outline: \"none\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }))), unstated.markers ? _.filter(unstated.markers, o => o.CountryCode === unstated.code || o.TotalConfirmed > maxMarkers).map(item => /*#__PURE__*/React.createElement(Marker, {\n    key: item.name,\n    coordinates: [item.lon, item.lat],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, item.CountryCode.toUpperCase() === unstated.code.toUpperCase() ? /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"none\",\n    stroke: \"#ff0000\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    transform: \"translate(-12, -35)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"10\",\n    r: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, item.TotalConfirmed > maxMarkers ? /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"none\",\n    stroke: \"#ffc107\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    transform: \"translate(-12, -6)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"8\",\n    r: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 27\n    }\n  })) : \"\"), item.CountryCode.toUpperCase() === unstated.code.toUpperCase() ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"text\", {\n    textAnchor: \"middle\",\n    style: {\n      fill: \"red\",\n      fontWeight: \"bold\",\n      textShadow: \"1px 1px 1px black\",\n      fontSize: \"15px\",\n      cursor: \"default\",\n      zIndex: -10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/covid19/stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  }, \" \\u2316 Details - \", item.CountryCode, \": \", item.TotalConfirmed, \" cases\"))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"text\", {\n    textAnchor: \"middle\",\n    style: {\n      fill: \"orange\",\n      textShadow: \"1px 1px 1px black\",\n      fontWeight: \"bold\",\n      fontSize: \"10px\",\n      cursor: \"default\",\n      zIndex: -10\n    },\n    onMouseEnter: () => {\n      let country = _.find(unstated.markers, {\n        CountryCode: item.CountryCode\n      });\n\n      if (country) {\n        // cases = country.TotalConfirmed;\n        props.setTooltipContent({\n          Country: item.Country,\n          Population: '',\n          NewConfirmed: country.NewConfirmed,\n          TotalConfirmed: country.TotalConfirmed,\n          NewDeaths: country.NewDeaths,\n          TotalDeaths: country.TotalDeaths,\n          NewRecovered: country.NewRecovered,\n          TotalRecovered: country.TotalRecovered,\n          data: country\n        });\n      } else {\n        props.setTooltipContent({\n          Country: item.Country\n        });\n      }\n    },\n    onMouseLeave: () => {\n      props.setTooltipContent(\"\");\n    },\n    onClick: () => {\n      unstated.setCode(item.CountryCode.toUpperCase());\n      unstated.setCountry(item.Country.toUpperCase());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, item.TotalConfirmed > maxMarkers ? `${item.CountryCode} ${item.TotalConfirmed}` : \"\")))) : \"\"));\n};\n\nexport default MapChart; // Country: \"United States of America\"\n// CountryCode: \"US\"\n// Date: \"2020-12-12T01:31:13Z\"\n// NewConfirmed: 224452\n// NewDeaths: 2768\n// NewRecovered: 95151\n// Premium: {}\n// Slug: \"united-states\"\n// TotalConfirmed: 15611014\n// TotalDeaths: 292141\n// TotalRecovered: 5985047\n// capital: \"Washington D.C.\"\n// code: \"US\"\n// lat: 38\n// lon: -97\n// name: \"United States\"\n// timezones: (29) [\"America/New_York\", \"America/Detroit\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Indiana/Indianapolis\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Vevay\", \"America/Chicago\", \"America/Indiana/Tell_City\", \"America/Indiana/Knox\", \"America/Menominee\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/North_Dakota/Beulah\", \"America/Denver\", \"America/Boise\", \"America/Phoenix\", \"America/Los_Angeles\", \"America/Anchorage\", \"America/Juneau\", \"America/Sitka\", \"America/Metlakatla\", \"America/Yakutat\", \"America/Nome\", \"America/Adak\", \"Pacific/Honolulu\"]\n// __proto__: Object","map":{"version":3,"sources":["/Users/rims/Documents/Projects/covid19/src/components/Map/MapChart.tsx"],"names":["React","StoreContainer","_","Link","ComposableMap","Geographies","Geography","Marker","ZoomableGroup","geoUrl","MapChart","props","unstated","useContainer","data","setData","useState","total","maxMarkers","setMaxMarkers","myMarkers","mapDataCountries","Countries","map","item","push","name","Country","markerOffset","lon","lat","useEffect","getCovidMapMarkers","code","console","log","markers","undefined","TotalConfirmed","rotate","scale","geographies","geo","rsmKey","NAME","POP_EST","ISO_A2","properties","country","find","CountryCode","setTooltipContent","Population","NewConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","setCode","toUpperCase","setCountry","default","fill","outline","hover","pressed","filter","o","fontWeight","textShadow","fontSize","cursor","zIndex"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { StoreContainer } from '../Store';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\n\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  ZoomableGroup,\n} from \"react-simple-maps\";\n\ninterface IMarkers {\n  markerOffset: number,\n  name: string,\n  lon: number,\n  lat: number\n}\nconst geoUrl: string =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = (props: any) => {\n  const unstated = StoreContainer.useContainer();\n  const [data, setData] = React.useState<any>(unstated.total);\n  const [maxMarkers, setMaxMarkers] = React.useState<number>(700000);\n  const myMarkers: IMarkers[] = []\n\n  function mapDataCountries(data: any) {\n    if (data.Countries) {\n      data.Countries.map((item: any) => myMarkers.push({ name: item.Country, markerOffset: 0, lon: 0, lat: 0 }))\n    }\n    // console.log(myMarkers)\n    return myMarkers;\n  }\n  React.useEffect(() => {\n    setData(unstated.getCovidMapMarkers());\n    if (data)\n      mapDataCountries(data);\n    // eslint-disable-next-line\n  }, [data, unstated.code])\n\n  React.useEffect(() => {\n    console.log(unstated.markers)\n    if (unstated.markers !== undefined)\n      setMaxMarkers(unstated.markers[9] ? unstated.markers[9].TotalConfirmed : 700000);\n    // eslint-disable-next-line\n  }, [unstated.markers])\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 200\n      }}\n    >\n      <ZoomableGroup zoom={1}>\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                fill=\"#DDD\"\n                stroke=\"#FFF\"\n                onMouseEnter={() => {\n                  let { NAME, POP_EST, ISO_A2 } = geo.properties;\n                  let country: object | any = _.find((unstated.markers), { CountryCode: ISO_A2 });\n                  if (country) {\n                    props.setTooltipContent({\n                      Country: NAME,\n                      Population: POP_EST,\n                      NewConfirmed: country.NewConfirmed,\n                      TotalConfirmed: country.TotalConfirmed,\n                      NewDeaths: country.NewDeaths,\n                      TotalDeaths: country.TotalDeaths,\n                      NewRecovered: country.NewRecovered,\n                      TotalRecovered: country.TotalRecovered,\n                      data: country\n                    });\n                  } else {\n                    props.setTooltipContent({ Country: NAME });\n                  }\n                }}\n                onMouseLeave={() => {\n                  props.setTooltipContent(\"\");\n                }}\n                onClick={() => {\n                  let { NAME, ISO_A2 } = geo.properties;\n                  unstated.setCode(ISO_A2.toUpperCase());\n                  unstated.setCountry(NAME.toUpperCase());\n\n                }}\n\n                style={{\n                  default: {\n                    fill: \"#D6D6DA\",\n                    outline: \"none\"\n                  },\n                  hover: {\n                    fill: \"#F53\",\n                    outline: \"none\"\n                  },\n                  pressed: {\n                    fill: \"#E42\",\n                    outline: \"none\"\n                  }\n                }}\n              />\n            ))\n          }\n        </Geographies>\n        {unstated.markers ?\n          (_.filter(unstated.markers, (o: any) => o.CountryCode === unstated.code || o.TotalConfirmed > maxMarkers))\n            .map((item: any) => (\n              <Marker key={item.name} coordinates={[item.lon, item.lat]}>\n                {item.CountryCode.toUpperCase() === unstated.code.toUpperCase() ?\n                  <g\n                    fill=\"none\"\n                    stroke=\"#ff0000\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    transform=\"translate(-12, -35)\"\n                  >\n                    <circle cx=\"12\" cy=\"10\" r=\"3\" />\n                    <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\n                  </g> :\n                  <>\n                    {\n                      item.TotalConfirmed > maxMarkers ?\n                        <g\n                          fill=\"none\"\n                          stroke=\"#ffc107\"\n                          strokeWidth=\"2\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          transform=\"translate(-12, -6)\"\n                        >\n                          <circle cx=\"12\" cy=\"8\" r=\"1\" />\n                        </g>\n                        : \"\"}\n                  </>\n                }\n\n                {item.CountryCode.toUpperCase() === unstated.code.toUpperCase() ?\n                    <>\n                      <text\n                        textAnchor=\"middle\"\n                        style={{ fill: \"red\", fontWeight: \"bold\", textShadow: \"1px 1px 1px black\", fontSize: \"15px\", cursor: \"default\", zIndex: -10 }}\n                      >\n                        <Link to=\"/covid19/stats\"> ⌖ Details - {item.CountryCode}\n                       : {item.TotalConfirmed} cases\n                        </Link>\n                      </text>\n                    </>\n                  :\n                  <>\n                    <text\n                      textAnchor=\"middle\"\n                      style={{ fill: \"orange\", textShadow: \"1px 1px 1px black\", fontWeight: \"bold\", fontSize: \"10px\", cursor: \"default\", zIndex: -10 }}\n                      onMouseEnter={() => {\n                        let country: object | any = _.find((unstated.markers), { CountryCode: item.CountryCode });\n                        if (country) {\n                          // cases = country.TotalConfirmed;\n                          props.setTooltipContent({\n                            Country: item.Country,\n                            Population: '',\n                            NewConfirmed: country.NewConfirmed,\n                            TotalConfirmed: country.TotalConfirmed,\n                            NewDeaths: country.NewDeaths,\n                            TotalDeaths: country.TotalDeaths,\n                            NewRecovered: country.NewRecovered,\n                            TotalRecovered: country.TotalRecovered,\n                            data: country\n                          });\n                        } else {\n                          props.setTooltipContent({ Country: item.Country });\n                        }\n                      }}\n                      onMouseLeave={() => {\n                        props.setTooltipContent(\"\");\n                      }}\n                      onClick={() => {\n                        unstated.setCode(item.CountryCode.toUpperCase());\n                        unstated.setCountry(item.Country.toUpperCase());\n                      }}\n                    >\n                      {item.TotalConfirmed > maxMarkers ? `${item.CountryCode} ${item.TotalConfirmed}` : \"\"}\n                    </text>\n                  </>\n                }\n              </Marker >\n            )) : \"\"\n        }\n      </ZoomableGroup>\n    </ComposableMap >\n  );\n};\n\nexport default MapChart;\n\n\n// Country: \"United States of America\"\n// CountryCode: \"US\"\n// Date: \"2020-12-12T01:31:13Z\"\n// NewConfirmed: 224452\n// NewDeaths: 2768\n// NewRecovered: 95151\n// Premium: {}\n// Slug: \"united-states\"\n// TotalConfirmed: 15611014\n// TotalDeaths: 292141\n// TotalRecovered: 5985047\n// capital: \"Washington D.C.\"\n// code: \"US\"\n// lat: 38\n// lon: -97\n// name: \"United States\"\n// timezones: (29) [\"America/New_York\", \"America/Detroit\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Indiana/Indianapolis\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Vevay\", \"America/Chicago\", \"America/Indiana/Tell_City\", \"America/Indiana/Knox\", \"America/Menominee\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/North_Dakota/Beulah\", \"America/Denver\", \"America/Boise\", \"America/Phoenix\", \"America/Los_Angeles\", \"America/Anchorage\", \"America/Juneau\", \"America/Sitka\", \"America/Metlakatla\", \"America/Yakutat\", \"America/Nome\", \"America/Adak\", \"Pacific/Honolulu\"]\n// __proto__: Object"]},"metadata":{},"sourceType":"module"}