{"ast":null,"code":"var _jsxFileName = \"/Users/rims/Documents/Projects/covid19/src/components/Map/MapChart.tsx\";\nimport React from \"react\";\nimport { StoreContainer } from '../Store';\nimport _ from 'lodash';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = props => {\n  const unstated = StoreContainer.useContainer(); // const [data, setData] = React.useState<any>(unstated.total);\n\n  const [maxMarkers, setMaxMarkers] = React.useState(700000);\n  const myMarkers = [];\n\n  function mapDataCountries(data) {\n    if (data.Countries) {\n      data.Countries.map(item => myMarkers.push({\n        name: item.Country,\n        markerOffset: 0,\n        lon: 0,\n        lat: 0\n      }));\n    } // console.log(myMarkers)\n\n\n    return myMarkers;\n  } // React.useEffect(() => {\n  // setData(unstated.getCovidMapMarkers());\n  //   if (data)\n  //     mapDataCountries(data);\n  //   // eslint-disable-next-line\n  // }, [data, unstated.code])\n  // React.useEffect(() => {\n  //   console.log(unstated.markers)\n  //   if (unstated.markers !== undefined)\n  //     setMaxMarkers(unstated.markers[9] ? unstated.markers[9].TotalConfirmed : 700000);\n  //   // eslint-disable-next-line\n  // }, [unstated.markers])\n\n\n  return /*#__PURE__*/React.createElement(ComposableMap, {\n    projectionConfig: {\n      rotate: [-10, 0, 0],\n      scale: 200\n    } // style={{ marginTop: '-5em' }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    zoom: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => /*#__PURE__*/React.createElement(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    fill: \"#DDD\",\n    stroke: \"#FFF\",\n    onMouseEnter: () => {\n      let {\n        NAME,\n        POP_EST,\n        ISO_A2\n      } = geo.properties; // let country: object | any = _.find((unstated.markers), { CountryCode: ISO_A2 });\n\n      let country = _.find([\"FR\", \"FI\"], {\n        CountryCode: ISO_A2\n      });\n\n      if (country) {\n        // cases = country.TotalConfirmed;\n        props.setTooltipContent({\n          Country: NAME,\n          Population: POP_EST,\n          NewConfirmed: country.NewConfirmed,\n          TotalConfirmed: country.TotalConfirmed,\n          NewDeaths: country.NewDeaths,\n          TotalDeaths: country.TotalDeaths,\n          NewRecovered: country.NewRecovered,\n          TotalRecovered: country.TotalRecovered,\n          data: country\n        });\n      } else {\n        props.setTooltipContent({\n          Country: NAME\n        });\n      }\n    },\n    onMouseLeave: () => {\n      props.setTooltipContent(\"\");\n    },\n    onClick: () => {\n      let {\n        NAME,\n        ISO_A2\n      } = geo.properties;\n      unstated.setCode(ISO_A2.toLowerCase());\n      unstated.setCountry(NAME.toLowerCase()); // console.log(\"mapCharts : code \", unstated.code);\n    },\n    style: {\n      default: {\n        fill: \"#D6D6DA\",\n        outline: \"none\"\n      },\n      hover: {\n        fill: \"#F53\",\n        outline: \"none\"\n      },\n      pressed: {\n        fill: \"#E42\",\n        outline: \"none\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default MapChart; // Country: \"United States of America\"\n// CountryCode: \"US\"\n// Date: \"2020-12-12T01:31:13Z\"\n// NewConfirmed: 224452\n// NewDeaths: 2768\n// NewRecovered: 95151\n// Premium: {}\n// Slug: \"united-states\"\n// TotalConfirmed: 15611014\n// TotalDeaths: 292141\n// TotalRecovered: 5985047\n// capital: \"Washington D.C.\"\n// code: \"US\"\n// lat: 38\n// lon: -97\n// name: \"United States\"\n// timezones: (29) [\"America/New_York\", \"America/Detroit\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Indiana/Indianapolis\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Vevay\", \"America/Chicago\", \"America/Indiana/Tell_City\", \"America/Indiana/Knox\", \"America/Menominee\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/North_Dakota/Beulah\", \"America/Denver\", \"America/Boise\", \"America/Phoenix\", \"America/Los_Angeles\", \"America/Anchorage\", \"America/Juneau\", \"America/Sitka\", \"America/Metlakatla\", \"America/Yakutat\", \"America/Nome\", \"America/Adak\", \"Pacific/Honolulu\"]\n// __proto__: Object","map":{"version":3,"sources":["/Users/rims/Documents/Projects/covid19/src/components/Map/MapChart.tsx"],"names":["React","StoreContainer","_","ComposableMap","Geographies","Geography","ZoomableGroup","geoUrl","MapChart","props","unstated","useContainer","maxMarkers","setMaxMarkers","useState","myMarkers","mapDataCountries","data","Countries","map","item","push","name","Country","markerOffset","lon","lat","rotate","scale","geographies","geo","rsmKey","NAME","POP_EST","ISO_A2","properties","country","find","CountryCode","setTooltipContent","Population","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","setCode","toLowerCase","setCountry","default","fill","outline","hover","pressed"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { StoreContainer } from '../Store';\nimport _ from 'lodash';\n\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  ZoomableGroup\n} from \"react-simple-maps\";\n\ninterface IMarkers {\n  markerOffset: number,\n  name: string,\n  lon: number,\n  lat: number\n}\nconst geoUrl: string =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = (props: any) => {\n  const unstated = StoreContainer.useContainer();\n  // const [data, setData] = React.useState<any>(unstated.total);\n  const [maxMarkers, setMaxMarkers] = React.useState<number>(700000);\n  const myMarkers: IMarkers[] = []\n\n  function mapDataCountries(data: any) {\n    if (data.Countries) {\n      data.Countries.map((item: any) => myMarkers.push({ name: item.Country, markerOffset: 0, lon: 0, lat: 0 }))\n    }\n    // console.log(myMarkers)\n    return myMarkers;\n  }\n  // React.useEffect(() => {\n  // setData(unstated.getCovidMapMarkers());\n  //   if (data)\n  //     mapDataCountries(data);\n  //   // eslint-disable-next-line\n  // }, [data, unstated.code])\n\n  // React.useEffect(() => {\n  //   console.log(unstated.markers)\n  //   if (unstated.markers !== undefined)\n  //     setMaxMarkers(unstated.markers[9] ? unstated.markers[9].TotalConfirmed : 700000);\n  //   // eslint-disable-next-line\n  // }, [unstated.markers])\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 200\n      }}\n    // style={{ marginTop: '-5em' }}\n    >\n      <ZoomableGroup zoom={1}>\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                fill=\"#DDD\"\n                stroke=\"#FFF\"\n                onMouseEnter={() => {\n                  let { NAME, POP_EST, ISO_A2 } = geo.properties;\n                  // let country: object | any = _.find((unstated.markers), { CountryCode: ISO_A2 });\n                  let country: object | any = _.find(([\"FR\",\"FI\"]), { CountryCode: ISO_A2 });\n                  if (country) {\n                    // cases = country.TotalConfirmed;\n                    props.setTooltipContent({\n                      Country: NAME,\n                      Population: POP_EST,\n                      NewConfirmed: country.NewConfirmed,\n                      TotalConfirmed: country.TotalConfirmed,\n                      NewDeaths: country.NewDeaths,\n                      TotalDeaths: country.TotalDeaths,\n                      NewRecovered: country.NewRecovered,\n                      TotalRecovered: country.TotalRecovered,\n                      data: country\n                    });\n                  } else {\n                    props.setTooltipContent({ Country: NAME });\n                  }\n                }}\n                onMouseLeave={() => {\n                  props.setTooltipContent(\"\");\n                }}\n                onClick={() => {\n                  let { NAME, ISO_A2 } = geo.properties;\n                  unstated.setCode(ISO_A2.toLowerCase());\n                  unstated.setCountry(NAME.toLowerCase());\n                  // console.log(\"mapCharts : code \", unstated.code);\n                }}\n\n                style={{\n                  default: {\n                    fill: \"#D6D6DA\",\n                    outline: \"none\"\n                  },\n                  hover: {\n                    fill: \"#F53\",\n                    outline: \"none\"\n                  },\n                  pressed: {\n                    fill: \"#E42\",\n                    outline: \"none\"\n                  }\n                }}\n              />\n            ))\n          }\n        </Geographies>\n        {/* {unstated.markers ?\n          (_.filter(unstated.markers, (o: any) => o.CountryCode === unstated.code || o.TotalConfirmed > maxMarkers))\n            .map((item: any) => (\n              <Marker key={item.name} coordinates={[item.lon, item.lat]}>\n                {item.CountryCode.toLowerCase() === unstated.code.toLowerCase() ?\n                  <g\n                    fill=\"none\"\n                    stroke=\"#ff0000\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    transform=\"translate(-12, -35)\"\n                  >\n                    <circle cx=\"12\" cy=\"10\" r=\"3\" />\n                    <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\n                  </g> :\n                  <>\n                    {\n                      item.TotalConfirmed > maxMarkers ?\n                        <g\n                          fill=\"none\"\n                          stroke=\"#ffc107\"\n                          strokeWidth=\"2\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          transform=\"translate(-12, -6)\"\n                        >\n                          <circle cx=\"12\" cy=\"8\" r=\"1\" />\n                        </g>\n                        : \"\"}\n                  </>\n                }\n\n                {item.CountryCode.toLowerCase() === unstated.code.toLowerCase() ?\n                  <text\n                    textAnchor=\"middle\"\n                    style={{ fill: \"red\", fontWeight: \"bold\", textShadow: \"1px 1px 1px black\", fontSize: \"15px\" , cursor: \"default\", zIndex:-10}}\n                  >\n                    {item.CountryCode} : {item.TotalConfirmed} cases\n                </text>\n                  : <text\n                    textAnchor=\"middle\"\n                    style={{ fill: \"orange\", textShadow: \"1px 1px 1px black\", fontWeight: \"bold\", fontSize: \"10px\", cursor: \"default\", zIndex:-10 }}\n                    onMouseEnter={() => {\n                      let country: object | any = _.find((unstated.markers), { CountryCode: item.CountryCode });\n                      if (country) {\n                        // cases = country.TotalConfirmed;\n                        props.setTooltipContent({\n                          Country: item.Country,\n                          Population: '',\n                          NewConfirmed: country.NewConfirmed,\n                          TotalConfirmed: country.TotalConfirmed,\n                          NewDeaths: country.NewDeaths,\n                          TotalDeaths: country.TotalDeaths,\n                          NewRecovered: country.NewRecovered,\n                          TotalRecovered: country.TotalRecovered,\n                          data: country\n                        });\n                      } else {\n                        props.setTooltipContent({ Country: item.Country });\n                      }\n                    }}\n                    onMouseLeave={() => {\n                      props.setTooltipContent(\"\");\n                    }}\n                    onClick={() => {\n                      unstated.setCode(item.CountryCode.toLowerCase());\n                      unstated.setCountry(item.Country.toLowerCase());\n                      // console.log(\"mapCharts : code \", unstated.code);\n                    }}\n                  >\n                    {\n                      item.TotalConfirmed > maxMarkers ? `${item.CountryCode} ${item.TotalConfirmed}` : \"\"}\n                  </text>\n                }\n              </Marker >\n            )) : \"\"\n        } */}\n      </ZoomableGroup>\n    </ComposableMap >\n  );\n};\n\nexport default MapChart;\n\n\n// Country: \"United States of America\"\n// CountryCode: \"US\"\n// Date: \"2020-12-12T01:31:13Z\"\n// NewConfirmed: 224452\n// NewDeaths: 2768\n// NewRecovered: 95151\n// Premium: {}\n// Slug: \"united-states\"\n// TotalConfirmed: 15611014\n// TotalDeaths: 292141\n// TotalRecovered: 5985047\n// capital: \"Washington D.C.\"\n// code: \"US\"\n// lat: 38\n// lon: -97\n// name: \"United States\"\n// timezones: (29) [\"America/New_York\", \"America/Detroit\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Indiana/Indianapolis\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Vevay\", \"America/Chicago\", \"America/Indiana/Tell_City\", \"America/Indiana/Knox\", \"America/Menominee\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/North_Dakota/Beulah\", \"America/Denver\", \"America/Boise\", \"America/Phoenix\", \"America/Los_Angeles\", \"America/Anchorage\", \"America/Juneau\", \"America/Sitka\", \"America/Metlakatla\", \"America/Yakutat\", \"America/Nome\", \"America/Adak\", \"Pacific/Honolulu\"]\n// __proto__: Object"]},"metadata":{},"sourceType":"module"}