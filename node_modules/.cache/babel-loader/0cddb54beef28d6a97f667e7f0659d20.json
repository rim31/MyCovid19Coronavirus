{"ast":null,"code":"import _regeneratorRuntime from\"/Users/rims/Documents/Projects/covid19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/rims/Documents/Projects/covid19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/rims/Documents/Projects/covid19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// eslint-disable-next-line\nimport*as React from'react';import{createContainer}from\"unstated-next\";import moment from'moment';import _ from'lodash';import{country_list}from'./Map/countries';// source : \"https://api.covid19api.com/\"\n// source : \"https://covidtracking.com/api/us/daily\"\nexport var useStore=function useStore(){var _React$useState=React.useState(\"\"),_React$useState2=_slicedToArray(_React$useState,2),country=_React$useState2[0],setCountry=_React$useState2[1];var _React$useState3=React.useState(\"\"),_React$useState4=_slicedToArray(_React$useState3,2),code=_React$useState4[0],setCode=_React$useState4[1];var _React$useState5=React.useState([]),_React$useState6=_slicedToArray(_React$useState5,2),covidApi=_React$useState6[0],setCovidApi=_React$useState6[1];var _React$useState7=React.useState([]),_React$useState8=_slicedToArray(_React$useState7,2),countriesML=_React$useState8[0],setCountriesML=_React$useState8[1];var _React$useState9=React.useState([]),_React$useState10=_slicedToArray(_React$useState9,2),data=_React$useState10[0],setData=_React$useState10[1];// data for graph\nvar _React$useState11=React.useState([]),_React$useState12=_slicedToArray(_React$useState11,2),dataDiff=_React$useState12[0],setDataDiff=_React$useState12[1];// data diff for graph\nvar _React$useState13=React.useState([]),_React$useState14=_slicedToArray(_React$useState13,2),total=_React$useState14[0],setTotal=_React$useState14[1];var _React$useState15=React.useState([]),_React$useState16=_slicedToArray(_React$useState15,2),labels=_React$useState16[0],setLabels=_React$useState16[1];var _React$useState17=React.useState([]),_React$useState18=_slicedToArray(_React$useState17,2),markers=_React$useState18[0],setMarkers=_React$useState18[1];var headers=new Headers({\"Accept\":\"application/json\",\"Content-Type\":\"application/json\",\"User-Agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0\"});var debug=true;function globalDataGraph(data){var resultCases=[];var resultDates=[];for(var i in data){resultDates.push(i);resultCases.push(data[i]);}// console.log(resultCases, resultDates);\nreturn{resultCases:resultCases,resultDates:resultDates};}function countriesListData(data){var resultCases=[];var resultCountries=[];var result=[];for(var i in data){resultCountries.push(data[i].Country);resultCases.push(data[i].TotalConfirmed);result.push({country:data[i].Country,TotalConfirmed:data[i].TotalConfirmed,sortable:true});}// console.log(resultCases, resultCountries);\nreturn{result:result,resultCases:resultCases,resultCountries:resultCountries};}/**\n   * function countryDataGraph(data: IDataCovid[] | ICountry[], country: string, caseType: string, dateTo: string) {\n   * Clean data array result of API and transform into array for graph\n   * @param data \n   * @param country \n   * @param caseType \n   * @param dateTo \n   * @returns nothing, just  setData([]); setLabels([]);setDataDiff([]); in the store\n   */function countryDataGraph(data,country,caseType,dateTo){var resultCases=[];var resultDates=[];if(data.length>0){data.forEach(function(item){// console.log(\"item : \", caseType, item[caseType], item);\nif(country==='FR'){// console.log(`country`, country)\nif(!item.Province){resultCases.push(item.Cases);resultDates.push(moment(item.Date).format('YYYY/MM/DD'));}// } else if (country === 'us' || debug === true) {\n}else if(country==='US'&&debug===true){if(moment(item.last_update).isAfter(dateTo)){resultCases.push(caseType===\"confirmed\"?item.cases:item[caseType]);resultDates.push(moment(item.last_update).format('YYYY/MM/DD'));}}else{if(moment(item.Date).isAfter(dateTo)){resultCases.push(item.Cases);resultDates.push(moment(item.Date).format('YYYY/MM/DD'));}}});var resultCasesDiff=_.map(resultCases,function(e,i){return resultCases[i+1]-e<0?0:resultCases[i+1]-e;});// console.log(`resultCases`, resultCases)\nresultCasesDiff.pop();resultCases.pop();resultDates.pop();// dataDiff === [] ? console.log(dataDiff) : console.log('');\nsetData(resultCasesDiff);// inversion between resultCasesDiff and resultCases for display graph of variations and not total\nsetDataDiff(resultCases);setLabels(resultDates);return{resultCases:resultCases,resultDates:resultDates,resultCasesDiff:resultCasesDiff};}else{setData([]);setLabels([]);setDataDiff([]);}}// function getCovidApi() :  get data by country\n// differents source cause pb with USA, \n// you cans get data according Country Code, date from  and case : confirmed, deaths, recovered\n// have to use function countryDataGraph() to clean data and have an array to fit with D3js charts react-map-smples\nfunction getCovidApi(country,caseType,dateTo){if(country===\"\"){countryDataGraph([],\"\",\"\",\"\");}else{try{if(debug===false){return fetch(\"https://covid19-api.org/api/timeline/\".concat(country),{method:'GET',redirect:'follow',headers:headers}).then(function(response){return response.json();}).then(function(res){countryDataGraph(res.reverse(),country,caseType,dateTo);// cleaning data for ChartJS\n}).catch(function(err){return alert(err);});}else{return fetch(\"https://api.covid19api.com/country/\".concat(country,\"/status/\").concat(caseType,\"/live?from=\").concat(dateTo,\"&to=\").concat(moment().format('YYYY-MM-DDT00:00:00')),{method:'GET',redirect:'follow',headers:headers}).then(function(response){return response.json();}).then(function(res){// console.log(`res Fetch`, res)\ncountryDataGraph(res,country,caseType,dateTo);// cleaning data for ChartJS\n}).catch(function(err){return alert(err);});}}catch(err){console.log(err);return;}}};// to set unstated.total data : {Global, Countries,..} all total data of today\nvar getTotal=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.covid19api.com/summary\").then(function(res){return res.json();}).then(function(resp){return setTotal(resp);}).catch(function(err){throw err;});case 2:case\"end\":return _context.stop();}}},_callee);}));return function getTotal(){return _ref.apply(this,arguments);};}();var getCovidCountry=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(country,caseType,dateTo){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.t0=setCovidApi;_context2.next=3;return getCovidApi(country,caseType,dateTo);case 3:_context2.t1=_context2.sent;(0,_context2.t0)(_context2.t1);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function getCovidCountry(_x,_x2,_x3){return _ref2.apply(this,arguments);};}();/**\n   * just update global world total data for main dashboard\n   */var updateTotalCovid=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.t0=setTotal;_context3.next=3;return getTotal();case 3:_context3.t1=_context3.sent;(0,_context3.t0)(_context3.t1);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function updateTotalCovid(){return _ref3.apply(this,arguments);};}();// =================================================\n// function matching data for the map : react map simples\n// source (`https://api.covid19api.com/all`, {\nfunction getMarkers(arr1,arr2){return _.union(_.map(arr1,function(obj1){var same=_.find(arr2,function(obj2){return obj1[\"CountryCode\"]===obj2[\"code\"];});return same?_.extend(obj1,same):obj1;}),_.reject(arr2,function(obj2){return _.find(arr1,function(obj1){return obj2[\"code\"]===obj1[\"CountryCode\"];});}));}//order \nfunction dynamicSort(property){var sortOrder=1;if(property[0]===\"-\"){sortOrder=-1;property=property.substr(1);}return function(b,a){/* next line works with strings and numbers, \n       * and you may want to customize it to your needs\n       */var result=a[property]<b[property]?-1:a[property]>b[property]?1:0;return result*sortOrder;};}/**\n   * function for creating markers for the world map component\n   */function getCovidMapMarkers(){fetch(\"https://api.covid19api.com/summary\",{method:\"GET\"}).then(function(response){return response.json();}).then(function(res){// console.log(\"***********************\", res.Countries);\nvar resp=getMarkers(res.Countries,country_list);setMarkers(resp.sort(dynamicSort(\"TotalConfirmed\")));// console.log(resp);\nreturn resp;}).catch(function(err){return alert(err);});}/**\n   * just a function to get all countries list infectino for left side bar\n   * @returns nothing\n   */function getCountriesML(){try{return fetch(\"\\\"https://covid19-api.org/api/status\\\"\",{method:\"GET\"}).then(function(response){return response.text();});}catch(err){console.log(err);return;}};var updateCountriesML=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.t0=setCountriesML;_context4.next=3;return getCountriesML();case 3:_context4.t1=_context4.sent;(0,_context4.t0)(_context4.t1);case 5:case\"end\":return _context4.stop();}}},_callee4);}));return function updateCountriesML(){return _ref4.apply(this,arguments);};}();return{covidApi:covidApi,country_list:country_list,data:data,labels:labels,total:total,country:country,code:code,markers:markers,countriesML:countriesML,dataDiff:dataDiff,setCountry:setCountry,setCode:setCode,getTotal:getTotal,getCovidCountry:getCovidCountry,updateTotalCovid:updateTotalCovid,countryDataGraph:countryDataGraph,globalDataGraph:globalDataGraph,countriesListData:countriesListData,getCovidMapMarkers:getCovidMapMarkers,updateCountriesML:updateCountriesML};};export var StoreContainer=createContainer(useStore);","map":{"version":3,"sources":["/Users/rims/Documents/Projects/covid19/src/components/Store.tsx"],"names":["React","createContainer","moment","_","country_list","useStore","useState","country","setCountry","code","setCode","covidApi","setCovidApi","countriesML","setCountriesML","data","setData","dataDiff","setDataDiff","total","setTotal","labels","setLabels","markers","setMarkers","headers","Headers","debug","globalDataGraph","resultCases","resultDates","i","push","countriesListData","resultCountries","result","Country","TotalConfirmed","sortable","countryDataGraph","caseType","dateTo","length","forEach","item","Province","Cases","Date","format","last_update","isAfter","cases","resultCasesDiff","map","e","pop","getCovidApi","fetch","method","redirect","then","response","json","res","reverse","catch","err","alert","console","log","getTotal","resp","getCovidCountry","updateTotalCovid","getMarkers","arr1","arr2","union","obj1","same","find","obj2","extend","reject","dynamicSort","property","sortOrder","substr","b","a","getCovidMapMarkers","Countries","sort","getCountriesML","text","updateCountriesML","StoreContainer"],"mappings":"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","sourcesContent":["// eslint-disable-next-line\nimport * as React from 'react';\nimport { createContainer } from \"unstated-next\";\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { country_list } from './Map/countries';\nimport {IGlobalData, ICountry , IDataCovid} from './modules/Interfaces';\n// source : \"https://api.covid19api.com/\"\n// source : \"https://covidtracking.com/api/us/daily\"\n\n\nexport const useStore = () => {\n  const [country, setCountry] = React.useState<string>(\"\");\n  const [code, setCode] = React.useState<string>(\"\");\n  const [covidApi, setCovidApi] = React.useState<Object[] | null | void | undefined>([]);\n  const [countriesML, setCountriesML] = React.useState<Object[] | any>([]);\n  const [data, setData] = React.useState<Object[] | void | null | undefined>([]);// data for graph\n  const [dataDiff, setDataDiff] = React.useState<number[] | any[] | undefined>([]);// data diff for graph\n  const [total, setTotal] = React.useState<IGlobalData[] | void | null | undefined>([]);\n  const [labels, setLabels] = React.useState<Object[] | void | null | undefined>([]);\n  const [markers, setMarkers] = React.useState<any[] | undefined>([]);\n  const headers = new Headers({\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0\"\n  });\n\n  const debug: boolean = true;\n\n  function globalDataGraph(data: any) {\n    let resultCases: any[] = []\n    let resultDates: any[] = []\n    for (let i in data) {\n      resultDates.push(i);\n      resultCases.push(data[i]);\n    }\n    // console.log(resultCases, resultDates);\n    return ({ resultCases, resultDates });\n  }\n\n  function countriesListData(data: ICountry[]) {\n    let resultCases: any[] = []\n    let resultCountries: any[] = []\n    let result: any[] = []\n    for (let i in data) {\n      resultCountries.push(data[i].Country);\n      resultCases.push(data[i].TotalConfirmed);\n      result.push({\n        country: data[i].Country, TotalConfirmed: data[i].TotalConfirmed,\n        sortable: true,\n      })\n    }\n    // console.log(resultCases, resultCountries);\n    return ({ result, resultCases, resultCountries });\n  }\n\n  /**\n   * function countryDataGraph(data: IDataCovid[] | ICountry[], country: string, caseType: string, dateTo: string) {\n   * Clean data array result of API and transform into array for graph\n   * @param data \n   * @param country \n   * @param caseType \n   * @param dateTo \n   * @returns nothing, just  setData([]); setLabels([]);setDataDiff([]); in the store\n   */\n  function countryDataGraph(data: IDataCovid[] | ICountry[], country: string, caseType: string, dateTo: string) {\n    let resultCases: any[] = []\n    let resultDates: any[] = []\n    if (data.length > 0) {\n      data.forEach((item: any) => {\n        // console.log(\"item : \", caseType, item[caseType], item);\n        if (country === 'FR') {\n          // console.log(`country`, country)\n          if (!item.Province) {\n            resultCases.push(item.Cases);\n            resultDates.push(moment(item.Date).format('YYYY/MM/DD'));\n          }\n          // } else if (country === 'us' || debug === true) {\n        } else if (country === 'US' && debug === true) {\n          if ((moment(item.last_update).isAfter(dateTo))) {\n            resultCases.push(caseType === \"confirmed\" ? item.cases : item[caseType]);\n            resultDates.push(moment(item.last_update).format('YYYY/MM/DD'));\n          }\n        } else {\n          if ((moment(item.Date).isAfter(dateTo))) {\n            resultCases.push(item.Cases);\n            resultDates.push(moment(item.Date).format('YYYY/MM/DD'));\n          }\n        }\n      })\n      let resultCasesDiff: any[] = _.map(resultCases, function (e: any, i: any) {\n        return (resultCases[i + 1] - e) < 0 ? 0 : (resultCases[i + 1] - e)\n      });\n      // console.log(`resultCases`, resultCases)\n      resultCasesDiff.pop();\n      resultCases.pop();\n      resultDates.pop();\n      // dataDiff === [] ? console.log(dataDiff) : console.log('');\n      setData(resultCasesDiff);// inversion between resultCasesDiff and resultCases for display graph of variations and not total\n      setDataDiff(resultCases);\n      setLabels(resultDates);\n      return ({ resultCases, resultDates, resultCasesDiff });\n    } else {\n      setData([]);\n      setLabels([]);\n      setDataDiff([]);\n\n    }\n  }\n\n  // function getCovidApi() :  get data by country\n  // differents source cause pb with USA, \n  // you cans get data according Country Code, date from  and case : confirmed, deaths, recovered\n  // have to use function countryDataGraph() to clean data and have an array to fit with D3js charts react-map-smples\n  function getCovidApi(country: string, caseType: string, dateTo: string) {\n    if (country === \"\") {\n      countryDataGraph([], \"\", \"\", \"\");\n    } else {\n      try {\n        if (debug === false) {\n          return fetch(`https://covid19-api.org/api/timeline/${country}`, {\n            method: 'GET',\n            redirect: 'follow',\n            headers: headers\n          })\n            .then((response: any) => response.json()).then((res) => {\n              countryDataGraph(res.reverse(), country, caseType, dateTo);// cleaning data for ChartJS\n            }).catch(err => alert(err));\n        } else {\n          return fetch(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`, {\n            method: 'GET',\n            redirect: 'follow',\n            headers: headers\n          })\n            .then((response: any) => response.json()).then((res) => {\n              // console.log(`res Fetch`, res)\n              countryDataGraph(res, country, caseType, dateTo);// cleaning data for ChartJS\n            }).catch(err => alert(err));\n        }\n      } catch (err) {\n        console.log(err)\n        return;\n      }\n    }\n  };\n\n\n  // to set unstated.total data : {Global, Countries,..} all total data of today\n  const getTotal = async () => {\n    await fetch(`https://api.covid19api.com/summary`)\n      .then(res => res.json())\n      .then(resp => setTotal(resp))\n      .catch((err) => { throw (err) })\n  }\n\n  const getCovidCountry = async (country: string, caseType: string, dateTo: string) => {\n    setCovidApi(await getCovidApi(country, caseType, dateTo));\n    // console.log(`https://covid19-api.org/api/timeline/${country}`)\n    // console.log(`https://api.covid19api.com/country/${country}/status/${caseType}/live?from=${dateTo}&to=${moment().format('YYYY-MM-DDT00:00:00')}`)\n  }\n\n  /**\n   * just update global world total data for main dashboard\n   */\n  const updateTotalCovid = async () => {\n    setTotal(await getTotal());\n  }\n\n  // =================================================\n\n  // function matching data for the map : react map simples\n  // source (`https://api.covid19api.com/all`, {\n  function getMarkers(arr1: any, arr2: any) {\n    return _.union(\n      _.map(arr1, function (obj1) {\n        var same = _.find(arr2, function (obj2) {\n          return obj1[\"CountryCode\"] === obj2[\"code\"];\n        });\n        return same ? _.extend(obj1, same) : obj1;\n      }),\n      _.reject(arr2, function (obj2) {\n        return _.find(arr1, function (obj1) {\n          return obj2[\"code\"] === obj1[\"CountryCode\"];\n        });\n      })\n    );\n  }\n\n  //order \n  function dynamicSort(property: any) {\n    var sortOrder = 1;\n    if (property[0] === \"-\") {\n      sortOrder = -1;\n      property = property.substr(1);\n    }\n    return function (b: any, a: any) {\n      /* next line works with strings and numbers, \n       * and you may want to customize it to your needs\n       */\n      var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;\n      return result * sortOrder;\n    }\n  }\n\n  /**\n   * function for creating markers for the world map component\n   */\n  function getCovidMapMarkers() {\n    fetch(`https://api.covid19api.com/summary`, {\n      method: \"GET\",\n    }).then((response: any) => response.json()).then((res) => {\n      // console.log(\"***********************\", res.Countries);\n      let resp = getMarkers(res.Countries, country_list);\n      setMarkers(resp.sort(dynamicSort(\"TotalConfirmed\")));\n      // console.log(resp);\n      return (resp);\n    }).catch(err => alert(err));\n  }\n\n  /**\n   * just a function to get all countries list infectino for left side bar\n   * @returns nothing\n   */\n  function getCountriesML() {\n    try {\n      return fetch(`\"https://covid19-api.org/api/status\"`, {\n        method: \"GET\",\n      }).then((response: any) => response.text())\n    } catch (err) {\n      console.log(err)\n      return;\n    }\n  };\n\n  const updateCountriesML = async () => {\n    setCountriesML(await getCountriesML());\n  }\n\n  return {\n    covidApi,\n    country_list,\n    data,\n    labels,\n    total,\n    country,\n    code,\n    markers,\n    countriesML,\n    dataDiff,\n    setCountry,\n    setCode,\n    getTotal,\n    getCovidCountry,\n    updateTotalCovid,\n    countryDataGraph,\n    globalDataGraph,\n    countriesListData,\n    getCovidMapMarkers,\n    updateCountriesML,\n  };\n}\nexport const StoreContainer = createContainer(useStore)\n"]},"metadata":{},"sourceType":"module"}